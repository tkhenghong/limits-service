# Create an official name for this microservice
spring.application.name=limits-service
# port for the microservice, but we don't need it right now because the app will port to 8080 by default
# server.port=8080

# Setting up the properties value to be read in the Java file via @Value or
# Will be commented due to move these values to Spring Cloud Config Server
#limits-service.minimum=9
#limits-service.maximum=999


# This file has been renamed from application.properties to bootstrap.properties ****

# Tell this project where to get the configuration, get the Spring Cloud Config app that is running in localhost:8888 like below:

spring.cloud.config.uri=http://localhost:8888

# If this project picks up the configuration from Spring Cloud Config server app, your current app log will say:
# 2020-02-20 06:08:18.261  INFO 7208 --- [)-192.168.214.1] c.c.c.ConfigServicePropertySourceLocator : Fetching config from server at : http://localhost:8888
# ...
# 2020-02-20 06:08:20.406  INFO 7208 --- [)-192.168.214.1] c.c.c.ConfigServicePropertySourceLocator : Located environment: name=limits-service, profiles=[default], label=null, version=2c939c6c7c7da2f2ee864722cd167d4c6b02db74, state=null
# http://localhost:8888 url, it only picks up the default profile.

# How to choose your profile between dev and qa? Write the following command below:
spring.profiles.active=qa

# So Spring will take limits-service-dev.properties file's property.
# But there are 3 ways that you can configure this value,
# 1. Open multiple Git branches, and write different value in different branches
# 2. Write this value in VM Options of IntelliJ or Eclipse
# 3. Give arguments when you're executing the JAR file of this app

# You must restart both Spring Cloud Config server and the Limit Service app to see effect if you change and commit the values in git-localconfig-repo .properties files.